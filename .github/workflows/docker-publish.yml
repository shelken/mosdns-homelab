name: Publish to GHCR

on:
  schedule:
    # 每周六
    - cron: "5 14 * * 6"
  workflow_dispatch:
    inputs:
      version: 
        type: string
        description: "指定版本"
        required: false
      release: 
        type: boolean
        description: "推送"
        required: false
        default: false
  push:
    paths:
      - "config/**"
      - "Dockerfile"
      - "config_v5/**"
      - "docker-bake.hcl"
    tags: ["v*.*.*"]

jobs:
  plan:
    name: Plan
    outputs:
      app: ${{ steps.options.outputs.app }}
      version: ${{ steps.options.outputs.version }}
      platforms: ${{ steps.options.outputs.platforms }}
      release: ${{ steps.options.outputs.release }}
      build_context: ${{ steps.options.outputs.build_context }}
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      - name: Application Options
        id: options
        shell: bash
        working-directory: .
        run: |
          PLATFORMS=$(\
              docker buildx bake image-all --print --progress=quiet -f docker-bake.hcl \
                  | jq --raw-output --compact-output '.target."image-all".platforms' \
          )
          SOURCE=$(\
              docker buildx bake --list type=variables,format=json --progress=quiet -f docker-bake.hcl \
                  | jq --raw-output '.[] | select(.name == "SOURCE") | .value' \
          )
          APP=$(\
              docker buildx bake --list type=variables,format=json --progress=quiet -f docker-bake.hcl \
                  | jq --raw-output '.[] | select(.name == "APP") | .value' \
          )
          BUILD_CONTEXT=$(\
              docker buildx bake image-all --print --progress=quiet -f docker-bake.hcl \
                  | jq --raw-output --compact-output '.target."image-all".context' \
          )
          RELEASE=false
          if [ -n "${{ inputs.version }}" ]; then
            VERSION="${{ inputs.version }}"
          else
            VERSION="${{ github.ref_name }}"
            RELEASE=true
          fi
          if [ -z "$VERSION"  ]; then
            echo "version is missing, exiting..."
            exit 1
          fi
          VERSION="${VERSION#v}"
          
          if [ -n "${{ inputs.release }}"  ]; then
            RELEASE=${{ inputs.release }}
          fi

          echo "platforms=${PLATFORMS}" >> $GITHUB_OUTPUT
          echo "source=${SOURCE}" >> $GITHUB_OUTPUT
          echo "app=${APP}" >> $GITHUB_OUTPUT
          echo "version=${VERSION}" >> $GITHUB_OUTPUT
          echo "release=${RELEASE}" >> $GITHUB_OUTPUT
          echo "build_context=${BUILD_CONTEXT}" >> $GITHUB_OUTPUT

      - name: Build Application Metadata
        uses: docker/metadata-action@902fa8ec7d6ecbf8d84d538b9b233a880e428804 # v5.7.0
        id: meta
        env:
          DOCKER_METADATA_ANNOTATIONS_LEVELS: manifest,index
        with:
          flavor: latest=false
          images: |
            ghcr.io/${{ github.repository_owner }}/${{ steps.options.outputs.app }}
          tags: |
            type=semver,pattern={{version}},value=${{ steps.options.outputs.version }}
            type=semver,pattern={{major}}.{{minor}},value=${{ steps.options.outputs.version }}
            type=semver,pattern={{major}},value=${{ steps.options.outputs.version }}
            type=raw,value=rolling

      - name: Upload Bake Metadata
        uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02 # v4.6.2
        with:
          name: ${{ steps.options.outputs.app }}-bake-metadata
          path: ${{ steps.meta.outputs.bake-file }}
          if-no-files-found: error
          retention-days: 1
              
      - if: ${{ steps.options.outputs.release }}
        name: Upload v2 Data files
        uses: ./.github/actions/v2-files.yaml
        with:
          upload_name: mosdns-v2-data

  build:
    needs: plan
    name: Build (${{ matrix.platform }})
    runs-on: ${{ startsWith(matrix.platform, 'linux/arm') && 'ubuntu-24.04-arm' || 'ubuntu-latest' }}
    permissions:
      packages: write
    strategy: 
      fail-fast: false
      matrix: 
        platform: ${{ fromJson(needs.plan.outputs.platforms) }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Get Target Architecture
        uses: actions/github-script@60a0d83039c74a4aee543508d2ffcb1c3799cdea # v7.0.1
        id: target
        with:
          script: |
            core.setOutput('arch', '${{ matrix.platform }}'.split('/').pop());
    
      - name: Login to GitHub Container Registry
        uses: docker/login-action@74a5d142397b4f367a81961eba4e8cd7edddf772 # v3.4.0
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ github.token }}

      - name: Download Bake Metadata
        uses: actions/download-artifact@d3f86a106a0bac45b974a628896c90dbdf5c8093 # v4.3.0
        with:
          name: ${{ needs.plan.outputs.app }}-bake-metadata
          path: ${{ runner.temp }}

      - name: Download v2 Data
        uses: actions/download-artifact@d3f86a106a0bac45b974a628896c90dbdf5c8093 # v4.3.0
        with:
          name: mosdns-v2-data
          path: ./${{ needs.plan.outputs.build_context }}/dat/

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3 # v3.0.0

      - name: Build Application
        uses: docker/bake-action@37816e747588cb137173af99ab33873600c46ea8 # v6.8.0
        id: bake
        with:
          files: |
            ./docker-bake.hcl
            cwd://${{ runner.temp }}/docker-metadata-action-bake.json
          set: |
            *.args.VENDOR=${{ github.repository_owner }}
            *.cache-from=${{ format('type=registry,ref=ghcr.io/{0}/{1}:build_cache-{2},mode=max', github.repository_owner, needs.plan.outputs.app, steps.target.outputs.arch) }}
            *.cache-to=${{ needs.plan.outputs.release && format('type=registry,ref=ghcr.io/{0}/{1}:build_cache-{2},mode=max,compression=zstd,force-compression=true', github.repository_owner, needs.plan.outputs.app, steps.target.outputs.arch) || '' }}
            *.labels.org.opencontainers.image.title=${{ needs.plan.outputs.app }}
            *.labels.org.opencontainers.image.url=https://ghcr.io/${{ github.repository_owner }}/${{ needs.plan.outputs.app }}
            *.labels.org.opencontainers.image.version=${{ needs.plan.outputs.version }}
            *.labels.org.opencontainers.image.revision=${{ github.sha }}
            *.labels.org.opencontainers.image.vendor=${{ github.repository_owner }}
            ${{ needs.plan.outputs.release && format('*.output=type=image,name=ghcr.io/{0}/{1},push-by-digest=true,name-canonical=true,push=true', github.repository_owner, needs.plan.outputs.app) || '*.output=type=docker' }}
            *.platform=${{ matrix.platform }}
            *.tags=
          source: .
          targets: image
          workdir: .

      - if: ${{ needs.plan.outputs.release }}
        name: Export Digest
        run: |
          mkdir -p ${{ runner.temp }}/digests
          DIGEST="${{ fromJSON(steps.bake.outputs.metadata).image['containerimage.digest'] }}"
          touch "${{ runner.temp }}/digests/${DIGEST#sha256:}"

      - if: ${{ needs.plan.outputs.release }}
        name: Upload Digest
        uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02 # v4.6.2
        with:
          name: ${{ needs.plan.outputs.app }}-digests-${{ steps.target.outputs.arch }}
          path: ${{ runner.temp }}/digests/*
          if-no-files-found: error
          retention-days: 1
  
  release:
    if: ${{ needs.plan.outputs.release }}
    name: Release
    runs-on: ubuntu-latest
    needs: ["plan", "build"]
    # outputs:
    #   digest: ${{ steps.digest.outputs.digest }}
    steps:
      - name: Checkout
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
        with:
          persist-credentials: false

      - name: Download Bake Metadata
        uses: actions/download-artifact@d3f86a106a0bac45b974a628896c90dbdf5c8093 # v4.3.0
        with:
          name: ${{ needs.plan.outputs.app }}-bake-metadata
          path: ${{ runner.temp }}

      - name: Download Digests
        uses: actions/download-artifact@d3f86a106a0bac45b974a628896c90dbdf5c8093 # v4.3.0
        with:
          path: ${{ runner.temp }}/digests
          pattern: ${{ needs.plan.outputs.app }}-digests-*
          merge-multiple: true

      - name: Login to GitHub Container Registry
        uses: docker/login-action@74a5d142397b4f367a81961eba4e8cd7edddf772 # v3.4.0
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ github.token }}

      - name: Create Manifest List and Push
        working-directory: ${{ runner.temp }}/digests
        run: |
          docker buildx imagetools create \
              $(jq --raw-output --compact-output '.target."docker-metadata-action".tags | map(select(startswith("ghcr.io/${{ github.repository_owner }}/${{ needs.plan.outputs.app }}")) | "-t " + .) | join(" ")' ${{ runner.temp }}/docker-metadata-action-bake.json) \
              $(printf 'ghcr.io/${{ github.repository_owner }}/${{ needs.plan.outputs.app }}@sha256:%s ' *)

      - name: Inspect Image
        run: |
          docker buildx imagetools inspect ghcr.io/${{ github.repository_owner }}/${{ needs.plan.outputs.app }}:$(jq --raw-output '.target."docker-metadata-action".args.DOCKER_META_VERSION' ${{ runner.temp }}/docker-metadata-action-bake.json)

      - name: Export Digest
        id: digest
        run: |
          TAG=$(jq --raw-output '.target."docker-metadata-action".args.DOCKER_META_VERSION' ${{ runner.temp }}/docker-metadata-action-bake.json)
          DIGEST=$(docker buildx imagetools inspect ghcr.io/${{ github.repository_owner }}/${{ needs.plan.outputs.app }}:${TAG} --format '{{ json . }}' | jq --raw-output '.manifest.digest')
          echo "digest=${DIGEST}" >> $GITHUB_OUTPUT